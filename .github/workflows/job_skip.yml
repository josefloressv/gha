# will run three jobs that depend one each other and the condition to run is every pull request.
# The first job will print "Hello from Job 1",
# the second job will print "Hello from Job 2",
# and the third will print "Hello from Job 3". 
# Constraints: job two only will run if the file skip.txt is modified if not can be skipped,
# and job 3 will always run no matter if job 2 doesn't run

name: Dependency Pipeline

on:
  pull_request: # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    branches:
        - main

jobs:
  changed_files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Validate Changes
    outputs:
        files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Get files changed
        id: changed-files
        uses: tj-actions/changed-files@v37
      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
  job1:
    runs-on: ubuntu-latest
    needs: changed_files
    steps:
      - name: Print Hello from Job 1
        run: echo "Hello from Job 1"

  job2:
    runs-on: ubuntu-latest
    needs: [job1, changed_files]
    if: ${{ always() && !contains(needs.changed_files.outputs.files, 'skip.txt') }}
    steps:
      - name: Print Hello from Job 2
        run: echo "Hello from Job 2"
      - name: List all changed files
        run: |
          for file in ${{ needs.changed_files.outputs.files }}; do
            echo "$file was changed"
          done

  job3:
    runs-on: ubuntu-latest
    needs: job2
    # https://samanpavel.medium.com/github-actions-conditional-job-execution-e6aa363d2867
    if: always() && (needs.job2.result == 'success' || needs.job2.result == 'skipped')
    steps:
      - name: Print Hello from Job 3
        run: echo "Hello from Job 3"
